`timescale 1ns / 1ps

module tb_rgb_conv64;

    parameter DATA_WIDTH = 8;
    parameter HEIGHT = 224;
    parameter WIDTH = 224;
    parameter NUM_FILTERS = 64;

    reg clk, rst, load_weight;
    reg [3*DATA_WIDTH-1:0] input_col_r, input_col_g, input_col_b;
    //reg [9*DATA_WIDTH-1:0] weights_r, weights_g, weights_b;
    wire [NUM_FILTERS*(2*DATA_WIDTH+6)-1:0] conv_outs;

    reg [7:0] image_r [0:224*224-1];
    reg [7:0] image_g [0:224*224-1];
    reg [7:0] image_b [0:224*224-1];

    integer row, col, f,count,padding,pc;
    integer out_file;

    // Clock generation
    always #5 clk = ~clk;

    // Generate 64 identical filters (with weights_r, weights_g, weights_b)
    //wire [64*9*DATA_WIDTH-1:0] weights_r_all, weights_g_all, weights_b_all;

    //genvar i;
    /*generate
        for (i = 0; i < NUM_FILTERS; i = i + 1) begin : weight_copy
            assign weights_r_all[(i+1)*9*DATA_WIDTH-1 -: 9*DATA_WIDTH] = weights_r;
            assign weights_g_all[(i+1)*9*DATA_WIDTH-1 -: 9*DATA_WIDTH] = weights_g;
            assign weights_b_all[(i+1)*9*DATA_WIDTH-1 -: 9*DATA_WIDTH] = weights_b;
        end
    endgenerate
*/
    // DUT instantiation
    rgb_conv_layer_64 #(.DATA_WIDTH(DATA_WIDTH)) dut (
        .clk(clk),
        .rst(rst),
        .load_weight(load_weight),
        .input_col_r(input_col_r),
        .input_col_g(input_col_g),
        .input_col_b(input_col_b),
        //.weights_r_all(weights_r_all),
        //.weights_g_all(weights_g_all),
        //.weights_b_all(weights_b_all),
        .conv_outs(conv_outs)
    );

    // Initial block
    initial begin
        clk = 0; rst = 1; load_weight = 0;

        // Set all weights to 1
        /*for (f = 0; f < 9; f = f + 1) begin
            weights_r[f*DATA_WIDTH +: DATA_WIDTH] = 8'd1;
            weights_g[f*DATA_WIDTH +: DATA_WIDTH] = 8'd1;
            weights_b[f*DATA_WIDTH +: DATA_WIDTH] = 8'd1;
        end*/

        // Wait and release reset
        #20 rst = 0;

        // Load image from memory files
        $readmemh("/home/mohit/Downloads/image_r.mem", image_r);
        $readmemh("/home/mohit/Downloads/image_g.mem", image_g);
        $readmemh("/home/mohit/Downloads/image_b.mem", image_b);
       @(posedge clk);
        // Load weights
        load_weight = 1;
        @(posedge clk);
        load_weight = 0;

        // Wait a few cycles to stabilize weights inside systolic array
        repeat (5) @(posedge clk);

        // Open output file
        out_file = $fopen("/home/mohit/Downloads/output_112x112x64.txt", "w");

        // Feed data column by column (width - 2 due to 3x3 kernel)
        count=0;
        pc=0;
        // Stride-2 with padding=1
padding = 1;

for (row = -padding; row < HEIGHT + padding - 2; row = row + 2) begin
    for (col = -padding; col < WIDTH + padding - 2; col = col + 1) begin
        @(posedge clk);

        // Prepare input columns with padding check
        input_col_r = {
            (row   < 0 || row   >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_r[row*WIDTH + col],
            (row+1 < 0 || row+1 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_r[(row+1)*WIDTH + col],
            (row+2 < 0 || row+2 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_r[(row+2)*WIDTH + col]
        };

        input_col_g = {
            (row   < 0 || row   >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_g[row*WIDTH + col],
            (row+1 < 0 || row+1 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_g[(row+1)*WIDTH + col],
            (row+2 < 0 || row+2 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_g[(row+2)*WIDTH + col]
        };

        input_col_b = {
            (row   < 0 || row   >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_b[row*WIDTH + col],
            (row+1 < 0 || row+1 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_b[(row+1)*WIDTH + col],
            (row+2 < 0 || row+2 >= HEIGHT || col < 0 || col >= WIDTH) ? 8'd0 : image_b[(row+2)*WIDTH + col]
        };

        count = count + 1;

        // Reset count at the end of a row
        if (col == WIDTH + padding - 3)
            count = 0;

        // Write output only every 2 columns
        if (count % 3 == 0 && col != WIDTH + padding - 3 && count != 0) begin
            for (f = 0; f < NUM_FILTERS; f = f + 1) begin
                $fwrite(out_file, "%0d ", conv_outs[(f+1)*(2*DATA_WIDTH+6)-1 -: (2*DATA_WIDTH+6)]);
            end
            $fwrite(out_file, "\n");
            count=1;
        end
    end
end


        $fclose(out_file);
        $display("âœ… Output written to output_112x112x64.txt");
        $finish;
    end

endmodule
